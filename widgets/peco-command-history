#!/usr/bin/env zsh -eu

_peco_command_history_up() {
  fc -R

  if [ ! -z $(peco --help | grep '\--print-query') ]; then
    local peco_print_query='--print-query'
  else
    local peco_print_query=''
  fi

  BUFFER=$(\
    history 1 | \
    sort -k1,1nr | \
    perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\*?\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' \
    | peco --query="$LBUFFER" "$peco_print_query" \
    | tail -n 1
  )

  CURSOR=${#BUFFER}
  zle reset-prompt
}

zle -N peco-command-history-up _peco_command_history_up

# Recipi
# bindkey '^R' peco-command-history-up

_peco_command_history_bottom() {
   if [ ! $(which peco) ]; then echo "You need peco" && exit 1; fi

   local original_buffer="$BUFFER"

   # Reload command history
   fc -R

   if [ ! -z $(peco --help | grep '\--print-query') ]; then
     local peco_print_query='--print-query'
   else
     local peco_print_query=''
   fi

   BUFFER=$( \
      history 1 | \
      sort -k1,1nr | \
      perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\*?\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }' | \
      peco --layout=bottom-up --on-cancel=error "$peco_print_query" | \
      tail -n 1
   )

   zle reset-prompt

   # Keep original input when escape from select
   if [ -z "$BUFFER" ]; then
     BUFFER="$original_buffer"
   fi

   CURSOR=${#BUFFER}
}

zle -N peco-command-history-bottom _peco_command_history_bottom

# Recipi
# bindkey '^E' peco-command-history-bottom

