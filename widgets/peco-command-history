#!/usr/bin/env zsh -eu

_peco_command_history_resource() {

cat <<'EOM'
  history 0 |
  sort -k1,1nr |
  perl -ne 'BEGIN { my @lines = (); } s/^\s*\d+\*?\s*//; $in=$_; if (!(grep {$in eq $_} @lines)) { push(@lines, $in); print $in; }'
EOM
}

_peco_command_history_up() {
  fc -R

  if [ ! -z $(peco --help | grep '\--print-query') ]; then
    local peco_print_query='--print-query'
  else
    local peco_print_query=''
  fi

  BUFFER=$(\
    eval $(_peco_command_history_resource) | \
    peco --query="$LBUFFER" "$peco_print_query" | \
    tail -n 1
  )

  CURSOR=${#BUFFER}
  zle reset-prompt
}

zle -N peco-command-history-up _peco_command_history_up

_peco_command_history() {
   if [ ! $(which peco) ]; then echo "You need peco" && exit 1; fi

   local original_buffer="$1"
   local query="$2"

   # Reload command history
   fc -R

   if [ ! -z $(peco --help | grep '\--print-query') ]; then
     local peco_print_query='--print-query'
   else
     local peco_print_query=''
   fi

   BUFFER=$( \
      eval $(_peco_command_history_resource) | \
      peco --layout=bottom-up --query="$query" --on-cancel=error "$peco_print_query" | \
      tail -n 1
   )

   # FIXME: register to BUFFER peco query when canceled peco
   # Keep original input when escape from select
   if [ -z "$BUFFER" ]; then
     BUFFER="$original_buffer"
   fi

   echo "$BUFFER"

   zle reset-prompt

   CURSOR=${#BUFFER}
}



_peco_command_history_bottom() {
  _peco_command_history "$BUFFER" ""
}

zle -N peco-command-history-bottom _peco_command_history_bottom

# Recipi
# bindkey '^B' peco-command-history-bottom


_peco_command_history_bottom_remember() {
  _peco_command_history "$BUFFER" "$BUFFER"
}

zle -N peco-command-history-bottom-remember _peco_command_history_bottom_remember

# Recipi
# bindkey '^R' peco-command-history-bottom-remember


